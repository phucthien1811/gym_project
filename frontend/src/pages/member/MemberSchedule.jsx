import React, { useState, useEffect } from 'react';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faChevronLeft, faChevronRight } from '@fortawesome/free-solid-svg-icons';
import './css/MemberSchedule.css'  // H√†m ƒë·ªÉ t√≠nh to√°n v·ªã tr√≠ tr√™n l∆∞·ªõi theo t·∫ßng
    const calculateGridPosition = (item) => {
        return {
            gridColumn: item.day + 1, // C·ªôt theo ng√†y trong tu·∫ßn (2-8, v√¨ c·ªôt 1 l√† label t·∫ßng)
            gridRow: item.floor // H√†ng theo t·∫ßng (1, 2, 3, 4)
        };
    };


const MemberSchedule = () => {
    const [scheduledClasses, setScheduledClasses] = useState([]);
    const [loading, setLoading] = useState(true);
    const [currentWeekStart, setCurrentWeekStart] = useState(null);

    // T√≠nh tu·∫ßn hi·ªán t·∫°i
    const getCurrentWeekStart = () => {
        const today = new Date();
        const dayOfWeek = today.getDay();
        const diff = today.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1); // Th·ª© 2 ƒë·∫ßu tu·∫ßn
        return new Date(today.setDate(diff));
    };

    // Format ng√†y th√†nh string
    const formatDateString = (date) => {
        return date.toISOString().split('T')[0];
    };

    // T·∫°o array 7 ng√†y trong tu·∫ßn
    const getWeekDates = (weekStart) => {
        const dates = [];
        for (let i = 0; i < 7; i++) {
            const date = new Date(weekStart);
            date.setDate(weekStart.getDate() + i);
            dates.push(date);
        }
        return dates;
    };

    // Load danh s√°ch l·ªõp h·ªçc ƒë√£ ƒëƒÉng k√Ω
    const loadMySchedule = async () => {
        try {
            setLoading(true);
            const token = localStorage.getItem('token');
            
            console.log('üîÑ Loading my enrollments...');
            
            const response = await fetch(`/api/v1/schedules/my-enrollments`, {
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            console.log('üì° API Response status:', response.status);

            if (response.ok) {
                const data = await response.json();
                console.log('‚úÖ My enrollments data:', data); // Debug log
                
                // N·∫øu kh√¥ng c√≥ data ho·∫∑c data r·ªóng, hi·ªÉn th·ªã empty
                if (!data || data.length === 0) {
                    setScheduledClasses([]);
                    return;
                }
                
                // Transform data ƒë·ªÉ ph√π h·ª£p v·ªõi UI
                const transformedData = data.map(enrollment => {
                    // T·∫°o Date object t·ª´ class_date v√† start_time
                    const classDate = enrollment.class_date || new Date().toISOString().split('T')[0];
                    const startTime = enrollment.start_time || '09:00:00';
                    const endTime = enrollment.end_time || '10:00:00';
                    
                    // T√≠nh ng√†y trong tu·∫ßn (1=Th·ª© 2, 7=Ch·ªß nh·∫≠t)
                    const dateObj = new Date(classDate);
                    let dayOfWeek = dateObj.getDay(); // 0=Ch·ªß nh·∫≠t, 1=Th·ª© 2...
                    if (dayOfWeek === 0) dayOfWeek = 7; // Chuy·ªÉn Ch·ªß nh·∫≠t t·ª´ 0 th√†nh 7
                    
                    // S·ª≠ d·ª•ng tr∆∞·ªùng floor t·ª´ database, fallback v·ªÅ 1 n·∫øu kh√¥ng c√≥
                    const floor = enrollment.floor || 1;
                    
                    // Ki·ªÉm tra xem l·ªõp h·ªçc c√≥ trong tu·∫ßn hi·ªán t·∫°i kh√¥ng
                    const currentWeek = currentWeekStart || getCurrentWeekStart();
                    const weekDates = getWeekDates(currentWeek);
                    const isInCurrentWeek = weekDates.some(date => 
                        formatDateString(date) === classDate
                    );
                    
                    return {
                        id: enrollment.schedule_id,
                        day: dayOfWeek,
                        floor: floor, // S·ª≠ d·ª•ng tr∆∞·ªùng floor t·ª´ database
                        startTime: startTime.substring(0, 5), // "09:00"
                        endTime: endTime.substring(0, 5), // "10:00"
                        name: enrollment.class_name,
                        trainer: enrollment.trainer_name || 'Ch∆∞a c√≥ HLV',
                        studio: enrollment.room || enrollment.location || 'Ph√≤ng t·∫≠p ch√≠nh',
                        color: getClassColor(enrollment.class_name),
                        enrollment_id: enrollment.enrollment_id,
                        date: classDate,
                        isInCurrentWeek
                    };
                });
                
                console.log('üîÑ Transformed data:', transformedData); // Debug log
                
                // Hi·ªÉn th·ªã t·∫•t c·∫£ l·ªõp h·ªçc ƒë·ªÉ test layout t·∫ßng
                console.log('üìÖ All classes with floor info:', transformedData);
                setScheduledClasses(transformedData);
            } else {
                console.error('‚ùå Failed to load enrollments:', response.status, response.statusText);
                const errorText = await response.text();
                console.error('‚ùå Error details:', errorText);
            }
        } catch (error) {
            console.error('üí• Error loading my schedule:', error);
        } finally {
            setLoading(false);
        }
    };

    // H√†m ƒë·ªÉ ch·ªçn m√†u cho l·ªõp h·ªçc d·ª±a tr√™n t√™n
    const getClassColor = (className) => {
        if (className.toLowerCase().includes('yoga')) return 'green';
        if (className.toLowerCase().includes('cardio') || className.toLowerCase().includes('hiit')) return 'orange';
        if (className.toLowerCase().includes('boxing')) return 'red';
        if (className.toLowerCase().includes('strength') || className.toLowerCase().includes('gym')) return 'blue';
        return 'purple';
    };

    useEffect(() => {
        // Kh·ªüi t·∫°o tu·∫ßn hi·ªán t·∫°i
        const weekStart = getCurrentWeekStart();
        setCurrentWeekStart(weekStart);
        loadMySchedule();
    }, []);

    // Reload khi ƒë·ªïi tu·∫ßn
    useEffect(() => {
        if (currentWeekStart) {
            loadMySchedule();
        }
    }, [currentWeekStart]);

    // T·∫°o array ng√†y trong tu·∫ßn hi·ªán t·∫°i
    const weekStart = currentWeekStart || getCurrentWeekStart();
    const weekDates = getWeekDates(weekStart);
    
    // T·∫°o header v·ªõi ng√†y th·ª±c
    const daysOfWeek = weekDates.map((date, index) => {
        const dayNames = ['Th·ª© 2', 'Th·ª© 3', 'Th·ª© 4', 'Th·ª© 5', 'Th·ª© 6', 'Th·ª© 7', 'Ch·ªß Nh·∫≠t'];
        return {
            name: dayNames[index],
            date: date.getDate(),
            month: date.getMonth() + 1
        };
    });
    
    // Thay ƒë·ªïi t·ª´ timeSlots th√†nh floors
    const floors = ['T·∫ßng 1', 'T·∫ßng 2', 'T·∫ßng 3', 'T·∫ßng 4'];

    // H√†m ƒë·ªÉ chuy·ªÉn tu·∫ßn
    const navigateWeek = (direction) => {
        const newWeekStart = new Date(currentWeekStart);
        newWeekStart.setDate(newWeekStart.getDate() + (direction * 7));
        setCurrentWeekStart(newWeekStart);
    };

    // H√†m ƒë·ªÉ t√≠nh to√°n v·ªã tr√≠ tr√™n l∆∞·ªõi theo t·∫ßng
    const calculateGridPosition = (item) => {
        return {
            gridColumn: item.day + 1, // C·ªôt theo ng√†y trong tu·∫ßn (2-8, v√¨ c·ªôt 1 l√† header t·∫ßng)
            gridRow: item.floor // H√†ng theo t·∫ßng (1, 2, 3, 4)
        };
    };

    return (
        <div className="ms-container fade-in">
            <div className="ms-header">
                <h1 className="ms-title">L·ªãch t·∫≠p c·ªßa t√¥i</h1>
                <div className="ms-week-navigation">
                    <button className="ms-nav-btn" onClick={() => navigateWeek(-1)}>
                        <FontAwesomeIcon icon={faChevronLeft} />
                    </button>
                    <span>
                        {formatDateString(weekDates[0]).split('-').reverse().join('/')} - {formatDateString(weekDates[6]).split('-').reverse().join('/')}
                    </span>
                    <button className="ms-nav-btn" onClick={() => navigateWeek(1)}>
                        <FontAwesomeIcon icon={faChevronRight} />
                    </button>
                </div>
            </div>

            <div className="ms-grid-container">
                {/* D√≤ng ti√™u ƒë·ªÅ c√°c ng√†y trong tu·∫ßn */}
                <div className="ms-grid-header"></div> {/* √î tr·ªëng g√≥c tr√™n b√™n tr√°i */}
                {daysOfWeek.map((day, index) => (
                    <div key={index} className="ms-day-header">
                        {day.name}
                        <span className="ms-date-label">{day.date}/{day.month.toString().padStart(2, '0')}</span>
                    </div>
                ))}

                {/* C·ªôt t·∫ßng b√™n tr√°i */}
                <div className="ms-time-column">
                    {floors.map(floor => <div key={floor} className="ms-time-slot-label">{floor}</div>)}
                </div>

                {/* L∆∞·ªõi l·ªãch t·∫≠p ch√≠nh */}
                <div className="ms-main-grid">
                    {/* Hi·ªÉn th·ªã c√°c l·ªõp h·ªçc ƒë√£ ƒë·∫∑t */}
                    {loading ? (
                        <div className="ms-loading">ƒêang t·∫£i l·ªãch c·ªßa b·∫°n...</div>
                    ) : scheduledClasses.length === 0 ? (
                        <div className="ms-empty">B·∫°n ch∆∞a ƒëƒÉng k√Ω l·ªõp h·ªçc n√†o</div>
                    ) : (
                        scheduledClasses.map(item => {
                            const gridPosition = calculateGridPosition(item);
                            console.log(`Item ${item.name}: day=${item.day}, floor=${item.floor}, gridColumn=${gridPosition.gridColumn}, gridRow=${gridPosition.gridRow}`);
                            return (
                                <div 
                                    key={item.id} 
                                    className={`ms-scheduled-item ms-event-${item.color}`} 
                                    style={{
                                        gridColumn: gridPosition.gridColumn,
                                        gridRow: gridPosition.gridRow
                                    }}
                                >
                                    <p className="ms-event-name">{item.name}</p>
                                    <p className="ms-event-details">{item.startTime} - {item.endTime}</p>
                                    <p className="ms-event-details">HLV: {item.trainer}</p>
                                    <p className="ms-event-details">Ph√≤ng: {item.studio}</p>
                                </div>
                            );
                        })
                    )}
                </div>
            </div>
        </div>
    );
};

export default MemberSchedule;
