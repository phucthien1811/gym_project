import { scheduleService } from "../services/schedule.service.js";
import scheduleRepo from "../repositories/schedule.repo.js";
import knex from '../config/knex.js';
import { exportToExcel, presetStyles } from '../utils/excelExporter.js';

export const listSchedules = async (req, res, next) => {
  try {
    const { page = 1, limit = 10, trainer_id, from, to, status, class_name } = req.query;
    
    const filters = {
      page: Number(page), 
      limit: Number(limit),
      trainer_id: trainer_id ? Number(trainer_id) : null,
      from: from || null, 
      to: to || null, 
      status: status || null,
      class_name: class_name || null,
      user_id: req.user?.id || null // Add user_id ƒë·ªÉ check enrollment status
    };
    
    const [rows, c] = await Promise.all([
      scheduleService.list(filters),
      scheduleService.count(filters),
    ]);
    
    res.json({ 
      success: true,
      data: rows, 
      total: Number(c?.total || 0),
      pagination: {
        page: Number(page),
        limit: Number(limit),
        totalPages: Math.ceil(Number(c?.total || 0) / Number(limit))
      }
    });
  } catch (e) { 
    next(e); 
  }
};

export const getSchedule = async (req, res, next) => {
  try {
    const schedule = await scheduleService.byId(req.params.id);
    if (!schedule) {
      return res.status(404).json({ 
        success: false, 
        message: "L·ªãch h·ªçc kh√¥ng t·ªìn t·∫°i" 
      });
    }
    
    // L·∫•y danh s√°ch h·ªçc vi√™n ƒëƒÉng k√Ω
    const enrollments = await scheduleRepo.getEnrollments(req.params.id);
    
    res.json({ 
      success: true,
      data: {
        ...schedule,
        enrollments
      }
    });
  } catch (e) { 
    next(e); 
  }
};

export const createSchedule = async (req, res, next) => {
  try {
    const scheduleData = {
      ...req.body,
      created_at: new Date(),
      updated_at: new Date()
    };
    
    const schedule = await scheduleRepo.create(scheduleData);
    
    res.status(201).json({ 
      success: true,
      message: "T·∫°o l·ªãch h·ªçc th√†nh c√¥ng",
      data: schedule 
    });
  } catch (e) { 
    next(e); 
  }
};

export const updateSchedule = async (req, res, next) => {
  try {
    const scheduleId = req.params.id;
    const updateData = {
      ...req.body,
      updated_at: new Date()
    };
    
    const schedule = await scheduleRepo.update(scheduleId, updateData);
    
    if (!schedule) {
      return res.status(404).json({ 
        success: false, 
        message: "L·ªãch h·ªçc kh√¥ng t·ªìn t·∫°i" 
      });
    }
    
    res.json({ 
      success: true,
      message: "C·∫≠p nh·∫≠t l·ªãch h·ªçc th√†nh c√¥ng",
      data: schedule 
    });
  } catch (e) { 
    next(e); 
  }
};

export const deleteSchedule = async (req, res, next) => {
  try {
    const scheduleId = req.params.id;
    
    // Ki·ªÉm tra xem l·ªãch h·ªçc c√≥ t·ªìn t·∫°i kh√¥ng
    const schedule = await scheduleService.byId(scheduleId);
    if (!schedule) {
      return res.status(404).json({ 
        success: false, 
        message: "L·ªãch h·ªçc kh√¥ng t·ªìn t·∫°i" 
      });
    }
    
    // Ki·ªÉm tra xem c√≥ h·ªçc vi√™n ƒëƒÉng k√Ω kh√¥ng
    const enrollments = await scheduleRepo.getEnrollments(scheduleId);
    if (enrollments.length > 0) {
      return res.status(400).json({ 
        success: false, 
        message: "Kh√¥ng th·ªÉ x√≥a l·ªãch h·ªçc ƒë√£ c√≥ h·ªçc vi√™n ƒëƒÉng k√Ω" 
      });
    }
    
    await scheduleService.remove(scheduleId);
    res.json({ 
      success: true,
      message: "X√≥a l·ªãch h·ªçc th√†nh c√¥ng"
    });
  } catch (e) { 
    next(e); 
  }
};

// Th√™m c√°c function m·ªõi cho qu·∫£n l√Ω enrollment
export const enrollStudent = async (req, res, next) => {
  try {
    const { scheduleId } = req.params;
    const { userId } = req.body;
    
    // Ki·ªÉm tra l·ªãch h·ªçc c√≥ t·ªìn t·∫°i
    const schedule = await scheduleService.byId(scheduleId);
    if (!schedule) {
      return res.status(404).json({ 
        success: false, 
        message: "L·ªãch h·ªçc kh√¥ng t·ªìn t·∫°i" 
      });
    }
    
    // Ki·ªÉm tra s·ªë l∆∞·ª£ng h·ªçc vi√™n
    if (schedule.current_participants >= schedule.max_participants) {
      return res.status(400).json({ 
        success: false, 
        message: "L·ªõp h·ªçc ƒë√£ ƒë·∫ßy" 
      });
    }
    
    await scheduleRepo.enrollUser(scheduleId, userId);
    await scheduleRepo.updateCurrentParticipants(scheduleId);
    
    res.json({ 
      success: true,
      message: "ƒêƒÉng k√Ω h·ªçc vi√™n th√†nh c√¥ng"
    });
  } catch (e) {
    if (e.code === 'ER_DUP_ENTRY' || e.code === 'SQLITE_CONSTRAINT') {
      return res.status(400).json({ 
        success: false, 
        message: "H·ªçc vi√™n ƒë√£ ƒëƒÉng k√Ω l·ªõp h·ªçc n√†y" 
      });
    }
    next(e); 
  }
};

export const removeEnrollment = async (req, res, next) => {
  try {
    const { scheduleId, userId } = req.params;
    
    await scheduleRepo.removeEnrollment(scheduleId, userId);
    await scheduleRepo.updateCurrentParticipants(scheduleId);
    
    res.json({ 
      success: true,
      message: "H·ªßy ƒëƒÉng k√Ω th√†nh c√¥ng"
    });
  } catch (e) { 
    next(e); 
  }
};

// Get user's enrollments
export const getMyEnrollments = async (req, res, next) => {
  try {
    console.log('üîÑ getMyEnrollments called for user:', req.user?.id);
    
    const userId = req.user.id; // From auth middleware
    
    const enrollments = await knex('class_enrollments')
      .join('schedules', 'class_enrollments.schedule_id', 'schedules.id')
      .leftJoin('trainers', 'schedules.trainer_id', 'trainers.id')
      .select(
        'class_enrollments.id as enrollment_id',
        'schedules.id as schedule_id',
        'schedules.class_name',
        'schedules.start_time',
        'schedules.end_time',
        'schedules.class_date',
        'schedules.room',
        'schedules.location',
        'schedules.floor', // Th√™m tr∆∞·ªùng floor
        'trainers.name as trainer_name'
      )
      .where('class_enrollments.user_id', userId)
      .where('schedules.status', 'scheduled')
      .orderBy('schedules.class_date', 'asc')
      .orderBy('schedules.start_time', 'asc');

    console.log('üìä Found enrollments:', enrollments.length);
    console.log('üìù Enrollments data:', enrollments);

    res.json(enrollments);
  } catch (error) {
    console.error('üí• Error getting my enrollments:', error);
    res.status(500).json({ message: 'Error retrieving enrollments', error: error.message });
  }
};

// User enroll in class
export const userEnrollClass = async (req, res, next) => {
  try {
    const scheduleId = req.params.id;
    const userId = req.user.id; // From auth middleware
    
    const result = await scheduleRepo.enrollUser(scheduleId, userId);
    res.json({ message: 'Enrolled successfully', schedule: result });
  } catch (error) {
    console.error('Error enrolling user:', error);
    if (error.message.includes('not found') || error.message.includes('full') || error.message.includes('already enrolled')) {
      res.status(400).json({ message: error.message });
    } else {
      res.status(500).json({ message: 'Error enrolling user', error: error.message });
    }
  }
};

// User unenroll from class
export const userUnenrollClass = async (req, res, next) => {
  try {
    const scheduleId = req.params.id;
    const userId = req.user.id; // From auth middleware
    
    const result = await scheduleRepo.unenrollUser(scheduleId, userId);
    res.json({ message: 'Unenrolled successfully', schedule: result });
  } catch (error) {
    console.error('Error unenrolling user:', error);
    res.status(500).json({ message: 'Error unenrolling user', error: error.message });
  }
};

export const updateEnrollmentStatus = async (req, res, next) => {
  try {
    const { enrollmentId } = req.params;
    const { status } = req.body;
    
    await scheduleRepo.updateEnrollmentStatus(enrollmentId, status);
    
    res.json({ 
      success: true,
      message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng"
    });
  } catch (e) { 
    next(e); 
  }
};

export const getSchedulesByWeek = async (req, res, next) => {
  try {
    const { startDate, endDate } = req.query;
    
    if (!startDate || !endDate) {
      return res.status(400).json({ 
        success: false, 
        message: "C·∫ßn cung c·∫•p startDate v√† endDate" 
      });
    }
    
    const schedules = await scheduleRepo.getSchedulesByDateRange(startDate, endDate);
    
    res.json({ 
      success: true,
      data: schedules 
    });
  } catch (e) { 
    next(e); 
  }
};

// Export all classes/schedules to Excel
export const exportSchedules = async (req, res, next) => {
  try {
    console.log('üìä Export schedules called');
    console.log('Query params:', req.query);
    console.log('User:', req.user);
    
    const { trainer_id, from, to, status, difficulty_level, search } = req.query;
    
    const filters = {
      trainer_id: trainer_id ? Number(trainer_id) : null,
      from: from || null,
      to: to || null,
      status: status || null,
      difficulty_level: difficulty_level || null,
      class_name: search || null,
      page: 1,
      limit: 10000 // Get all data for export
    };
    
    const schedules = await scheduleService.list(filters);
    
    // Chu·∫©n b·ªã data cho Excel
    const excelData = schedules.map((schedule, index) => ({
      stt: index + 1,
      className: schedule.class_name || 'N/A',
      trainer: schedule.trainer_name || 'Ch∆∞a c√≥ HLV',
      date: schedule.class_date ? new Date(schedule.class_date).toLocaleDateString('vi-VN') : 'N/A',
      time: `${schedule.start_time?.substring(0, 5)} - ${schedule.end_time?.substring(0, 5)}`,
      location: schedule.floor && schedule.room ? `T·∫ßng ${schedule.floor} - ${schedule.room}` : 'N/A',
      participants: `${schedule.current_participants || 0}/${schedule.max_participants || 0}`,
      status: getStatusText(schedule.status),
      difficulty: getDifficultyText(schedule.difficulty_level)
    }));
    
    // T·∫°o filter summary
    const filterSummary = [];
    if (trainer_id) filterSummary.push(`Hu·∫•n luy·ªán vi√™n: ${trainer_id}`);
    if (status) filterSummary.push(`Tr·∫°ng th√°i: ${getStatusText(status)}`);
    if (difficulty_level) filterSummary.push(`ƒê·ªô kh√≥: ${getDifficultyText(difficulty_level)}`);
    if (from) filterSummary.push(`T·ª´ ng√†y: ${new Date(from).toLocaleDateString('vi-VN')}`);
    if (to) filterSummary.push(`ƒê·∫øn ng√†y: ${new Date(to).toLocaleDateString('vi-VN')}`);
    
    const headers = [
      { type: 'title', value: 'DANH S√ÅCH L·ªöP H·ªåC & L·ªäCH T·∫¨P' },
      { type: 'info', value: `Ng√†y xu·∫•t: ${new Date().toLocaleDateString('vi-VN')} ${new Date().toLocaleTimeString('vi-VN')}` },
      { type: 'info', value: `T·ªïng s·ªë l·ªõp: ${schedules.length}` }
    ];
    
    if (filterSummary.length > 0) {
      headers.push({ type: 'info', value: `B·ªô l·ªçc: ${filterSummary.join(', ')}` });
    }
    
    headers.push({ type: 'empty' });
    
    // C·∫•u h√¨nh xu·∫•t Excel
    const config = {
      fileName: `schedules_${new Date().toISOString().split('T')[0]}.xlsx`,
      sheetName: 'Danh s√°ch l·ªõp h·ªçc',
      headers,
      columns: [
        { header: 'STT', key: 'stt', width: 8 },
        { header: 'T√™n l·ªõp h·ªçc', key: 'className', width: 25 },
        { header: 'Hu·∫•n luy·ªán vi√™n', key: 'trainer', width: 25 },
        { header: 'Ng√†y h·ªçc', key: 'date', width: 15 },
        { header: 'Th·ªùi gian', key: 'time', width: 15 },
        { header: 'V·ªã tr√≠', key: 'location', width: 20 },
        { header: 'H·ªçc vi√™n', key: 'participants', width: 12 },
        { header: 'Tr·∫°ng th√°i', key: 'status', width: 15 },
        { header: 'ƒê·ªô kh√≥', key: 'difficulty', width: 15 }
      ],
      data: excelData,
      styles: presetStyles.green
    };
    
    // T·∫°o file Excel
    const buffer = await exportToExcel(config);
    
    // G·ª≠i file v·ªÅ client
    res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
    res.setHeader('Content-Disposition', `attachment; filename="${encodeURIComponent(config.fileName)}"`);
    res.send(buffer);
    
  } catch (e) {
    console.error('Error exporting schedules:', e);
    next(e);
  }
};

// Helper functions
function getStatusText(status) {
  const statusMap = {
    'scheduled': 'ƒê√£ l√™n l·ªãch',
    'ongoing': 'ƒêang di·ªÖn ra',
    'completed': 'Ho√†n th√†nh',
    'cancelled': 'ƒê√£ h·ªßy'
  };
  return statusMap[status] || status;
}

function getDifficultyText(level) {
  const levelMap = {
    'beginner': 'C∆° b·∫£n',
    'intermediate': 'Trung c·∫•p',
    'advanced': 'N√¢ng cao'
  };
  return levelMap[level] || level;
}

// Export enrolled users to Excel
export const exportEnrolledUsers = async (req, res, next) => {
  try {
    const scheduleId = req.params.id;
    
    // L·∫•y th√¥ng tin l·ªõp h·ªçc
    const schedule = await scheduleService.byId(scheduleId);
    if (!schedule) {
      return res.status(404).json({ 
        success: false, 
        message: "L·ªõp h·ªçc kh√¥ng t·ªìn t·∫°i" 
      });
    }
    
    // L·∫•y danh s√°ch h·ªçc vi√™n ƒëƒÉng k√Ω
    const enrollments = await scheduleRepo.getEnrollments(scheduleId);
    
    // Chu·∫©n b·ªã data cho Excel
    const excelData = enrollments.map((user, index) => ({
      stt: index + 1,
      name: user.name || user.full_name || 'N/A',
      email: user.email || 'N/A',
      phone: user.phone || 'N/A',
      enrolledDate: user.enrolled_at ? 
        new Date(user.enrolled_at).toLocaleDateString('vi-VN') : 
        'N/A',
      status: 'ƒê√£ ƒëƒÉng k√Ω'
    }));
    
    // C·∫•u h√¨nh xu·∫•t Excel
    const config = {
      fileName: `enrolled_users_${schedule.class_name.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.xlsx`,
      sheetName: 'Danh s√°ch h·ªçc vi√™n',
      headers: [
        { type: 'title', value: 'DANH S√ÅCH H·ªåC VI√äN ƒêƒÇNG K√ù L·ªöP H·ªåC' },
        { type: 'info', value: `T√™n l·ªõp: ${schedule.class_name}` },
        { type: 'info', value: `Hu·∫•n luy·ªán vi√™n: ${schedule.trainer_name || 'Ch∆∞a c√≥'}` },
        { type: 'info', value: `Ng√†y h·ªçc: ${new Date(schedule.class_date).toLocaleDateString('vi-VN')}` },
        { type: 'info', value: `Th·ªùi gian: ${schedule.start_time?.substring(0, 5)} - ${schedule.end_time?.substring(0, 5)}` },
        { type: 'info', value: `V·ªã tr√≠: T·∫ßng ${schedule.floor} - ${schedule.room}` },
        { type: 'info', value: `T·ªïng s·ªë h·ªçc vi√™n: ${enrollments.length}/${schedule.max_participants}` },
        { type: 'empty' }
      ],
      columns: [
        { header: 'STT', key: 'stt', width: 8 },
        { header: 'T√™n h·ªçc vi√™n', key: 'name', width: 30 },
        { header: 'Email', key: 'email', width: 35 },
        { header: 'S·ªë ƒëi·ªán tho·∫°i', key: 'phone', width: 18 },
        { header: 'Ng√†y ƒëƒÉng k√Ω', key: 'enrolledDate', width: 18 },
        { header: 'Tr·∫°ng th√°i', key: 'status', width: 15 }
      ],
      data: excelData,
      styles: presetStyles.green // S·ª≠ d·ª•ng theme xanh l√° cho gym
    };
    
    // T·∫°o file Excel
    const buffer = await exportToExcel(config);
    
    // G·ª≠i file v·ªÅ client
    res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
    res.setHeader('Content-Disposition', `attachment; filename="${encodeURIComponent(config.fileName)}"`);
    res.send(buffer);
    
  } catch (e) { 
    console.error('Error exporting enrolled users:', e);
    next(e); 
  }
};
